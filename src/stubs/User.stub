<?php

namespace App\WRLA;

use \Illuminate\Http\Request;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Auth;
use Illuminate\Database\Eloquent\Builder;
use WebRegulate\LaravelAdministration\Classes\WRLAHelper;
use \WebRegulate\LaravelAdministration\Classes\ManageableModel;
use WebRegulate\LaravelAdministration\Classes\ManageableFields\Json;
use \WebRegulate\LaravelAdministration\Classes\ManageableFields\Text;
use WebRegulate\LaravelAdministration\Classes\ManageableFields\Image;
use WebRegulate\LaravelAdministration\Classes\ManageableFields\JsonUI;
use WebRegulate\LaravelAdministration\Classes\ManageableFields\Select;
use WebRegulate\LaravelAdministration\Classes\ManageableFields\Heading;
use WebRegulate\LaravelAdministration\Enums\ManageableModelPermissions;
use \WebRegulate\LaravelAdministration\Classes\ManageableFields\Password;
use WebRegulate\LaravelAdministration\Classes\BrowseColumns\BrowseColumn;
use WebRegulate\LaravelAdministration\Classes\BrowseColumns\BrowseColumnImage;
use WebRegulate\LaravelAdministration\Classes\ManageableFields\ImageCroppable;

class User extends ManageableModel
{
    /**
     * Impersonate permission constant //
     *
     * @var string
     */
    public const IMPERSONATE = 'IMPERSONATE';

    /**
     * Setup the main properties of the model.
     *
     * @return void
     */
    public final static function mainSetup(): void
    {
        // Main
        static::setBaseModelClass(WRLAHelper::getUserModelClass());
        static::setDisplayName();
        static::setUrlAlias('user');
        static::setIcon('fa fa-user');

        // Permissions
        static::setPermission(self::IMPERSONATE, function() { return WRLAHelper::getCurrentUserData()->isMaster(); });
    }

    /**
     * Setup global properties of this manageable model.
     *
     * @return void
     */
    public final static function globalSetup(): void
    {
        // Navigation
        static::setChildNavigationItems(static::getDefaultChildNavigationItems());
    }

    /**
     * Setup browse properties of this manageable model.
     *
     * @return void
     */
    public final static function browseSetup(): void
    {
        // Browse filters
        static::setBrowseFilters([
            Select::makeBrowseFilter('userTypeFilter', 'User Type', 'fas fa-user-cog text-slate-400', 'w-1/5')
                ->setItems([
                    'all' => 'All users',
                    'admins_only' => 'Admins only',
                    'non_admins_only' => 'Non admins only',
                ])
                ->browseFilterApply(function(Builder $query, $table, $columns, $value) {
                    if($value == 'admins_only') return $query->where('permissions->admin', true);
                    else if($value == 'non_admins_only') return $query->where(function($query) {
                        $query->whereNull('permissions->admin')->orWhere('permissions->admin', false);
                    });

                    return $query;
                })
        ] + static::getDefaultBrowseFilters());

        // Browse actions (Remove import action #51)
        static::setBrowseActions(static::getDefaultBrowseActions()->forget(51));

        // Set order by
        static::setOrderBy();
    }

    /**
     * Provide an array of columns to display in the browse view.
     *
     * @return array
     */
    public final function getBrowseColumns(): array
    {
        return [
            'wrlaUserData.data->profile->avatar' => BrowseColumnImage::make('Avatar', $this->getModelInstance()->wrlaUserData?->getProfileAvatar(), 80)->class('rounded-full')->aspect('1/1'),
            'name' => 'Name',
            'email' => 'Email',
            'created_at' => 'Created',
            'wrlaUserData.permissions->admin' => BrowseColumn::make('Admin')->overrideRenderValue(function($value, $model) {
                return $value ? 'Yes' : 'No';
            }),
        ];
    }

    /**
     * Provide an array of manageable fields to display in the upsert view.
     *
     * @return array
     */
    public final function getManageableFields(): array
    {
        $currentUserData = WRLAHelper::getCurrentUserData();
        $modelInstance = $this->getModelInstance();

        return [
            Heading::make('User Information', 'fas fa-info-circle'),

            Text::make($this, 'name')
                ->required()
                ->validation('string|max:255')
                ->setAttribute('placeholder', 'John Doe'),

            Text::make($this, 'email')
                ->setLabel('Email Address')
                ->required()
                ->validation('email|max:255|unique:users,email,'.$modelInstance->id)
                ->setAttributes(['type' => 'email', 'placeholder' => 'email@domain.com'])
                ->notes('<b>Required</b> - Must be valid and unique'),

            Password::make($this, 'password'),

            ImageCroppable::make($this, 'wrlaUserData.avatar', 'images/avatars', '{id}-avatar-{time}.jpg', 'public')
                ->defaultImage($modelInstance->wrlaUserData?->getProfileAvatar())
                ->aspect('1/1')
                ->rounded('full')
                ->manipulateImage(function($image) {
                    $image->toJpeg(100);
                    return $image;
                })
                ->validation('image|mimes:jpeg,png,jpg,gif,svg')
                ->notes('<b>Required</b> - Image should be a valid JPG, PNG or GIF.'),

            Text::make($this, 'email_verified_at')
                ->setLabel('Email Verified At')
                ->default(date('Y-m-d H:i:s'))
                ->validation('nullable|date')
                ->setAttributes(['type' => 'datetime-local']),

            Heading::make('User Data', 'fas fa-user-cog'),

            Json::make($this, 'wrlaUserData.permissions')
                ->setLabel('Permissions')
                ->hideContainingBraces()
                ->mergeDefaultKeyValues(config('wr-laravel-administration.default_user_data.permissions') ?? [
                    'master' => false,
                    'admin' => false,
                ])
                ->jsonFormatValidation([
                    'master' => 'boolean'.(($currentUserData?->user_id == $modelInstance?->id) ? "|wrla_no_change:wrla_user_data,{$currentUserData?->id},permissions->master" : ''),
                    'admin' => 'boolean'.(($currentUserData?->user_id == $modelInstance?->id) ? "|wrla_no_change:wrla_user_data,{$currentUserData?->id},permissions->admin" : ''),
                ]),

            Json::make($this, 'wrlaUserData.settings')
                ->hideContainingBraces()
                ->mergeDefaultKeyValues(config('wr-laravel-administration.default_user_data.settings') ?? [
                    'theme' => 'default'
                ])
                ->jsonFormatValidation([
                    'theme' => 'string|in:default'
                ]),

            JsonUI::make($this, 'wrlaUserData.data')
                ->mergeDefaultKeyValues(config('wr-laravel-administration.default_user_data.data') ?? []),
        ];
    }

    /**
     * Provide the model instance actions.
     *
     * @param \Illuminate\Support\Collection $instanceActions default instance actions (edit, delete)
     * @return \Illuminate\Support\Collection
     */
    public final function getInstanceActions(Collection $instanceActions): Collection
    {
        $model = $this->getModelInstance();

        // If not current user
        if($model->id !== Auth::id()) {
            // If not soft deleted and has impersonate permission, add login as browse action
            if(method_exists($model, 'trashed') && !$model->trashed() && static::getPermission(self::IMPERSONATE)) {
                $instanceActions->prepend(
                    $this->createInstanceAction('Login', null, 'secondary', route('wrla.impersonate.login-as', ['id' => $model->id]), [
                        'onclick' => "if(!confirm('Login as ' + '{$model->email}' + '?')) { event.preventDefault(); }"
                    ])
                );
            }
        // Remove delete browse action if current user
        } else {
            $instanceActions->forget('delete');
        }

        return $instanceActions;
    }

    /**
     * Is model soft deletable
     *
     * @return bool
     */
    public static function isSoftDeletable(): bool
    {
        // Get whether base model has SoftDeletes trait
        return once(function(){
            return in_array('Illuminate\Database\Eloquent\SoftDeletes', class_uses(WRLAHelper::getUserModelClass())) ?? false;
        });
    }

    /**
     * Get current user manageable model
     *
     * @return User
     */
    public static function current(): User {
        return new User(
            WRLAHelper::getCurrentUser()
        );
    }

    /**
     * Post update model instance hook. Note that this is called after validation and after the model is updated and saved.
     *
     * @param Request $request The HTTP request object.
     * @param mixed $model The model instance.
     * @return void
     */
    public function postUpdateModelInstance(Request $request, mixed $model): void
    {
        // Relogin as the user if the id is the same as the current user, and email or password has been changed
        if ($this->getModelInstance()->id === Auth::id() && ($request->email !== $this->getModelInstance()->email || $request->password)) {
            Auth::login($this->getModelInstance());
        }
    }

    /**
     * Pre delete model instance hook
     *
     * @return void
     */
    public function preDeleteModelInstance(Request $request, int $oldId, bool $soft): void
    {
        // Get the user by their old id
        $user = WRLAHelper::getUserModelClass()::find($oldId);

        // Get the build wrla user id callable from config
        $buildWRLAUserIdFunc = config('wr-laravel-administration.build_wrla_user_data_id');

        // Get the user id to delete from the wrla_user_data table
        $userIdToDelete = is_callable($buildWRLAUserIdFunc) ? $buildWRLAUserIdFunc($user) : $user->id;

        // Delete the user data
        WRLAHelper::getUserDataModelClass()::where('user_id', $userIdToDelete)->delete();
    }

    /**
     * Get specific validation rule
     *
     * @return string
     */
    public function getValidationRule($column): string
    {
        return $this->getValidationRules()->get($column);
    }
}
