<?php

namespace App\WRLA;

use \Illuminate\Http\Request;
use Illuminate\Support\Collection;
use \Illuminate\Support\Stringable;
use WebRegulate\LaravelAdministration\Classes\WRLAHelper;
use WebRegulate\LaravelAdministration\Classes\WRLAPermissions;
use \WebRegulate\LaravelAdministration\Classes\ManageableModel;
use WebRegulate\LaravelAdministration\Classes\ManageableFields\Json;
use \WebRegulate\LaravelAdministration\Classes\ManageableFields\Text;
use WebRegulate\LaravelAdministration\Classes\ManageableFields\Image;
use \WebRegulate\LaravelAdministration\Classes\ManageableFields\Password;

class User extends ManageableModel
{
    /**
     * The base model class for the User.
     *
     * @var ?string
     */
    public static ?string $baseModelClass = \WebRegulate\LaravelAdministration\Models\User::class;

    /**
     * Login as permission constant
     *
     * @var string
     */
    const LOGIN_AS = 'user_login_as';

    /**
     * Get the URL alias for the User.
     *
     * @return string
     */
    public static function getUrlAlias(): string {
        return 'user';
    }

    /**
     * Get the display name for the User.
     *
     * @return Stringable
     */
    public static function getDisplayName(): Stringable {
        return str('User');
    }

    /**
     * Get the icon for the User.
     *
     * @return string
     */
    public static function getIcon(): string {
        return 'fa fa-user';
    }

    /**
     * Get the browsable columns for the User.
     *
     * @return Collection
     */
    public static function getBrowsableColumns(): Collection {
        return collect([
            'name' => 'Name',
            'email' => 'Email',
            'created_at' => 'Created',
        ]);
    }

    /**
     * Get current user manageable model
     *
     * @return User
     */
    public static function current(): User {
        return new User(
            \WebRegulate\LaravelAdministration\Models\User::current()
        );
    }

    /**
     * Get browse actions
     *
     * @param mixed $model
     * @return Collection
     */
    public static function getBrowseItemActions(mixed $model): Collection {
        $browseActions = parent::getBrowseItemActions($model);

        // If not current user, add login as if permitted
        if($model->id !== auth()->id()) {
            if((new self())->permissions()->hasPermission(User::LOGIN_AS)) {
                $browseActions->prepend(view(WRLAHelper::getViewPath('components.browse-actions.login-as'), [
                    'modelInstance' => $model
                ]), 'login_as');
            }
        // Remove delete browse action if current user
        } else {
            $browseActions->forget('delete');
        }

        return $browseActions;
    }

    /**
     * Get the manageable fields for the User.
     *
     * @return Collection
     */
    public function getManageableFields(): Collection {
        $currentUser = User::current()->getModelInstance();
        $modelInstance = $this->getModelInstance();

        return collect([
            Text::make($this, 'name')
                ->required()
                ->validation('string|max:255')
                ->attribute('placeholder', 'John Doe'),

            Text::make($this, 'email')
                ->required()
                ->validation('email|max:255')
                ->attribute('placeholder', 'email@domain.com')
                ->notes('<b>Required</b> - Must be valid and unique'),

            Password::make($this, 'password'),

            Image::make($this, 'data->profile->avatar', 'images/avatars', '{id}-avatar-{time}.png')
                ->defaultImage($modelInstance->getProfileAvatar())
                ->validation('image|mimes:jpeg,png,jpg,gif,svg|max:2048')
                ->notes('<b>Required</b> - Image should be a valid JPG, PNG or GIF, no larger than 1024kb. Will be cropped to square'),

            Json::make($this, 'permissions')
                ->mergeDefaultKeyValues([
                    'master' => false,
                    'admin' => false
                ])
                ->jsonFormatValidation([
                    'master' => 'boolean'.(($currentUser->id == $modelInstance->id) ? "|wrla_no_change:users,{$modelInstance->id},permissions->master" : ''),
                    'admin' => 'boolean'.(($currentUser->id == $modelInstance->id) ? "|wrla_no_change:users,{$modelInstance->id},permissions->admin" : '')
                ])
                ->hideContainingBraces()
                ->attributes(['placeholder' => 'JSON Data', 'rows' => 4]),

            Json::make($this, 'settings')
                ->mergeDefaultKeyValues([
                    'theme' => 'default'
                ])
                ->jsonFormatValidation([
                    'theme' => 'string|in:default'
                ])
                ->hideContainingBraces()
                ->attributes(['placeholder' => 'JSON Data', 'rows' => 4]),

            Json::make($this, 'data')
                ->hideContainingBraces()
                ->attributes(['placeholder' => 'JSON Data', 'rows' => 4]),
        ]);
    }

    /**
     * Update the model instance after a POST request.
     *
     * @param Request $request
     * @return void
     */
    public function postUpdateModelInstance(Request $request): void {
        // Relogin as the user if the id is the same as the current user, and email or password has been changed
        if ($this->getModelInstance()->id === auth()->id() && ($request->email !== $this->getModelInstance()->email || $request->password)) {
            auth()->login($this->getModelInstance());
        }
    }
}