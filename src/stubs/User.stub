<?php

namespace App\WRLA;

use \Illuminate\Http\Request;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Auth;
use Illuminate\Database\Eloquent\Builder;
use WebRegulate\LaravelAdministration\Models\UserData;
use WebRegulate\LaravelAdministration\Classes\WRLAHelper;
use \WebRegulate\LaravelAdministration\Classes\ManageableModel;
use WebRegulate\LaravelAdministration\Classes\ManageableFields\Json;
use \WebRegulate\LaravelAdministration\Classes\ManageableFields\Text;
use WebRegulate\LaravelAdministration\Classes\ManageableFields\Image;
use WebRegulate\LaravelAdministration\Classes\ManageableFields\Select;
use \WebRegulate\LaravelAdministration\Classes\ManageableFields\Password;
use WebRegulate\LaravelAdministration\Classes\BrowseColumns\BrowseColumn;

class User extends ManageableModel
{
    /**
     * Impersonate permission constant //
     *
     * @var string
     */
    public const IMPERSONATE = 'IMPERSONATE';

    /**
     * Setup the main properties of the model.
     *
     * @return void
     */
    public final static function mainSetup(): void
    {
        // Main
        static::setBaseModelClass(WRLAHelper::getWRLAUserModelClass());
        static::setDisplayName();
        static::setUrlAlias('user');
        static::setIcon('fa fa-user');

        // Permissions
        static::setPermission(self::IMPERSONATE, function() { return WRLAHelper::getWRLAUser()->isMaster(); });
    }

    /**
     * Setup global properties of this manageable model.
     *
     * @return void
     */
    public final static function globalSetup(): void
    {
        // Navigation
        static::setChildNavigationItems(static::getDefaultChildNavigationItems());
    }

    /**
     * Setup browse properties of this manageable model.
     *
     * @return void
     */
    public final static function browseSetup(): void
    {
        // Browse filters
        static::setBrowseFilters(static::getDefaultBrowseFilters()->merge([
            Select::makeBrowseFilter('userTypeFilter', 'User Type', 'fas fa-user-cog text-slate-400')
                ->setItems([
                    'all' => 'All users',
                    'admins_only' => 'Admins only',
                    'non_admins_only' => 'Non admins only',
                ])
                ->browseFilterApply(function(Builder $query, $table, $columns, $value) {
                    if($value !== 'all') {
                        return $query->where('permissions->admin', $value === 'admins_only' ? true : false);
                    }
                    return $query;
                }),
        ]));

        // Browse actions (Remove import action #51)
        static::setBrowseActions(static::getDefaultBrowseActions()->forget(51));

        // Set order by
        static::setOrderBy();
    }

    /**
     * Provide an array of columns to display in the browse view.
     *
     * @return array
     */
    public final function getBrowseColumns(): array
    {
        return [
            'wrlaUserData.data->profile->avatar' => BrowseColumn::make('Avatar', 'image')->setOptions([
                'width' => 80,
                'aspect' => '1/1',
                'class' => 'rounded-full',
                'value' => $this->getModelInstance()->getProfileAvatar()
            ]),
            'name' => 'Name',
            'email' => 'Email',
            'created_at' => 'Created',
            'wrlaUserData.permissions->admin' => BrowseColumn::make('Admin')->overrideRenderValue(function($value, $model) {
                return $value ? 'Yes' : 'No';
            }),
        ];
    }

    /**
     * Provide an array of manageable fields to display in the upsert view.
     *
     * @return array
     */
    public final function getManageableFields(): array
    {
        $currentUser = User::current()->getModelInstance();
        $modelInstance = $this->getModelInstance();

        return [
            Text::make($this, 'name')
                ->required()
                ->validation('string|max:255')
                ->setAttribute('placeholder', 'John Doe'),

            Text::make($this, 'email')
                ->setLabel('Email Address')
                ->required()
                ->validation('email|max:255|unique:users,email,'.$modelInstance->id)
                ->setAttributes(['type' => 'email', 'placeholder' => 'email@domain.com'])
                ->notes('<b>Required</b> - Must be valid and unique'),

            Password::make($this, 'password'),

            Image::make($this, 'wrlaUserData.data->profile->avatar', 'storage/images/avatars', '{id}-avatar-{time}.jpg')
                ->defaultImage($modelInstance->getProfileAvatar())
                ->aspect('1/1')
                ->rounded('full')
                ->manipulateImage(function($image) {
                    $image->cover(300, 300, 'center');
                    $image->toJpeg(100);
                    return $image;
                })
                ->validation('image|mimes:jpeg,png,jpg,gif,svg|max:10240')
                ->notes('<b>Required</b> - Image should be a valid JPG, PNG or GIF, no larger than 10mb.'),

            Json::make($this, 'wrlaUserData.permissions')
                ->setLabel('Permissions')
                ->mergeDefaultKeyValues([
                    'master' => false,
                    'admin' => false
                ])
                ->jsonFormatValidation([
                    'master' => 'boolean'.(($currentUser?->id == $modelInstance?->id) ? "|wrla_no_change:wrla_user_data,{$modelInstance->wrlaUserData?->id},permissions->master" : ''),
                    'admin' => 'boolean'.(($currentUser?->id == $modelInstance?->id) ? "|wrla_no_change:wrla_user_data,{$modelInstance->wrlaUserData?->id},permissions->admin" : ''),
                ])
                ->hideContainingBraces()
                ->setAttributes(['placeholder' => 'JSON Data', 'rows' => 4]),

            Json::make($this, 'wrlaUserData.settings')
                ->mergeDefaultKeyValues([
                    'theme' => 'default'
                ])
                ->jsonFormatValidation([
                    'theme' => 'string|in:default'
                ])
                ->hideContainingBraces()
                ->setAttributes(['placeholder' => 'JSON Data', 'rows' => 4]),

            Json::make($this, 'wrlaUserData.data')
                ->hideContainingBraces()
                ->setAttributes(['placeholder' => 'JSON Data', 'rows' => 4]),

            Text::make($this, 'email_verified_at')
                ->setLabel('Email Verified At')
                ->default(date('Y-m-d H:i:s'))
                ->validation('nullable|date')
                ->setAttributes(['type' => 'datetime-local']),
        ];
    }

    /**
     * Provide the model instance actions.
     *
     * @param \Illuminate\Support\Collection $instanceActions default instance actions (edit, delete)
     * @return \Illuminate\Support\Collection
     */
    public final function getInstanceActions(Collection $instanceActions): Collection
    {
        $model = $this->getModelInstance();

        // If not current user
        if($model->id !== Auth::id()) {
            // If not soft deleted and has impersonate permission, add login as browse action
            if(!$model->trashed() && static::getPermission(self::IMPERSONATE)) {
                $instanceActions->prepend(view(WRLAHelper::getViewPath('components.browse-actions.login-as'), [
                    'modelInstance' => $model
                ]), 'login_as');
            }
        // Remove delete browse action if current user
        } else {
            $instanceActions->forget('delete');
        }

        return $instanceActions;
    }

    /**
     * Is model soft deletable
     *
     * @return bool
     */
    public static function isSoftDeletable(): bool
    {
        // Get whether base model has SoftDeletes trait
        return once(function(){
            return in_array('Illuminate\Database\Eloquent\SoftDeletes', class_uses(\App\Models\User::class)) ?? false;
        });
    }

    /**
     * Get current user manageable model
     *
     * @return User
     */
    public static function current(): User {
        return new User(
            WRLAHelper::getWRLAUser()
        );
    }

    /**
     * Pre update relationship instance field hook. Note that this is called after validation but before the relationship instance is updated and saved for each field it's associated with.
     *
     * @param mixed $modelInstance The model instance.
     * @param mixed $relationshipInstance The relationship instance (If it already exists)
     * @param string $relationshipName The name of the relationship.
     * @param string $relationshipFieldName The name of the field in the relationship.
     * @param mixed $fieldValue The field value.
     * @return void
     */
    public function preUpdateRelationshipInstanceField(mixed &$modelInstance, mixed &$relationshipInstance, string $relationshipName, string $relationshipFieldName, mixed $fieldValue): void
    {
        // We prematurely save the model instance here and set the relationship instance user_id to the model instance id
        once(function() use ($modelInstance, $relationshipInstance) {
            // If user is being created, save the model instance first
            if($modelInstance->id === null) {
                $modelInstance->save();
            }

            // If relationship instance does not yet exist, set the relationship instance user_id to the model instance id and save
            if($relationshipInstance?->id === null) {
                $relationshipInstance->user_id = $modelInstance->id;
                $relationshipInstance->save();
            }
        });
    }

    /**
     * Post update model instance hook. Note that this is called after validation and after the model is updated and saved.
     *
     * @param Request $request The HTTP request object.
     * @param mixed $model The model instance.
     * @return void
     */
    public function postUpdateModelInstance(Request $request, mixed $model): void
    {
        // Relogin as the user if the id is the same as the current user, and email or password has been changed
        if ($this->getModelInstance()->id === Auth::id() && ($request->email !== $this->getModelInstance()->email || $request->password)) {
            Auth::login($this->getModelInstance());
        }
    }

    /**
     * Post delete model instance hook
     *
     * @return void
     */
    public function postDeleteModelInstance(Request $request, int $oldId, bool $soft): void
    {
        // If not soft delete then delete user data record
        if(!$soft) {
            UserData::where('user_id', $oldId)->delete();
        }
    }

    /**
     * Get specific validation rule
     *
     * @return string
     */
    public function getValidationRule($column): string
    {
        return $this->getValidationRules()->get($column);
    }
}
