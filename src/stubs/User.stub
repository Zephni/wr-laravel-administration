<?php

namespace App\WRLA;

use \Illuminate\Http\Request;
use Illuminate\Support\Collection;
use Illuminate\Contracts\Database\Eloquent\Builder;
use WebRegulate\LaravelAdministration\Classes\BrowsableColumn;
use WebRegulate\LaravelAdministration\Classes\BrowseFilter;
use WebRegulate\LaravelAdministration\Classes\WRLAHelper;
use \WebRegulate\LaravelAdministration\Classes\ManageableModel;
use WebRegulate\LaravelAdministration\Classes\ManageableFields\Json;
use \WebRegulate\LaravelAdministration\Classes\ManageableFields\Text;
use WebRegulate\LaravelAdministration\Classes\ManageableFields\Image;
use WebRegulate\LaravelAdministration\Classes\ManageableFields\Select;
use \WebRegulate\LaravelAdministration\Classes\ManageableFields\Password;

class User extends ManageableModel
{
    /**
     * The base model class for the User.
     *
     * @var ?string
     */
    public static ?string $baseModelClass = \WebRegulate\LaravelAdministration\Models\User::class;

    /**
     * Impersonate permission constant
     *
     * @var string
     */
    const IMPERSONATE = 'impersonate';

    /**
     * Get the URL alias for the User.
     *
     * @return string
     */
    public static function getUrlAlias(): string {
        return 'user';
    }

    /**
     * Get the display name for the User.
     *
     * @param bool $plural
     * @return string
     */
    public static function getDisplayName(bool $plural = false): string {
        return !$plural ? 'User' : 'Users';
    }

    /**
     * Get the icon for the User.
     *
     * @return string
     */
    public static function getIcon(): string {
        return 'fa fa-user';
    }

    /**
     * Get current user manageable model
     *
     * @return User
     */
    public static function current(): User {
        return new User(
            \WebRegulate\LaravelAdministration\Models\User::current()
        );
    }

    /**
     * Get the browsable columns for the User.
     *
     * @return Collection
     */
    public function getBrowsableColumns(): Collection {
        return collect([
            'data->profile->avatar' => BrowsableColumn::make('Avatar', 'image', 80)->setOptions([
                'aspect' => '1:1',
                'rounded' => true,
                'value' => $this->getModelInstance()->getProfileAvatar()
            ]),
            'name' => 'Name',
            'email' => 'Email',
            'created_at' => 'Created'
        ]);
    }

    /**
     * Get browse actions
     *
     * @param mixed $model
     * @return Collection
     */
    public static function getBrowseItemActions(mixed $model): Collection {
        $browseActions = parent::getBrowseItemActions($model);

        // If not current user
        if($model->id !== auth()->id()) {
            // If not soft deleted and has impersonate permission, add login as browse action
            if(!$model->trashed() && (new self())->permissions()->hasPermission(User::IMPERSONATE)) {
                $browseActions->prepend(view(WRLAHelper::getViewPath('components.browse-actions.login-as'), [
                    'modelInstance' => $model
                ]), 'login_as');
            }
        // Remove delete browse action if current user
        } else {
            $browseActions->forget('delete');
        }

        return $browseActions;
    }

    /**
     * Get browse filters (Applies to browse page)
     *
     * @return Collection
     */
    public static function getBrowseFilters(): Collection {
        $browseFilters = parent::getBrowseFilters();

        $browseFilters->put('userType', new BrowseFilter(
            Select::make(null, 'userType')
                ->setLabel('User Type')
                ->setItems([
                    'all' => 'All users',
                    'admins_only' => 'Admins only',
                    'non_admins_only' => 'Non admins only',
                ])
                ->default('all')
                ->setOptions([
                    'containerClass' => 'w-1/5',
                    'labelClass' => 'font-thin',
                ])
                ->setAttributes([
                    'wire:model.live' => 'filters.userType',
                    'class' => '!mt-1'
                ]),

            function(Builder $query, $columns, $value) {
                if($value === 'admins_only') {
                    return $query->where('permissions->admin', true);
                } elseif($value === 'non_admins_only') {
                    return $query->where('permissions->admin', false);
                }

                return $query;
            }
        ));

        return $browseFilters;
    }

    /**
     * Get the manageable fields for the User.
     *
     * @return Collection
     */
    public function getManageableFields(): Collection {
        $currentUser = User::current()->getModelInstance();
        $modelInstance = $this->getModelInstance();

        return collect([
            Text::make($this, 'name')
                ->required()
                ->validation('string|max:255')
                ->setAttribute('placeholder', 'John Doe'),

            Text::make($this, 'email')
                ->required()
                ->validation('email|max:255|unique:users,email,'.$modelInstance->id)
                ->setAttribute('placeholder', 'email@domain.com')
                ->notes('<b>Required</b> - Must be valid and unique'),

            Password::make($this, 'password'),

            Image::make($this, 'data->profile->avatar', 'images/avatars', '{id}-avatar-{time}.jpg')
                ->defaultImage($modelInstance->getProfileAvatar())
                ->aspect('1:1')
                ->rounded()
                ->manipulateImage(function($image) {
                    $image->cover(300, 300, 'center');
                    $image->toJpg();
                    return $image;
                })
                ->validation('image|mimes:jpeg,png,jpg,gif,vg|max:10240')
                ->notes('<b>Required</b> - Image should be a valid JPG, PNG or GIF, no larger than 10mb.'),

            Json::make($this, 'permissions')
                ->mergeDefaultKeyValues([
                    'master' => false,
                    'admin' => false
                ])
                ->jsonFormatValidation([
                    'master' => 'boolean'.(($currentUser->id == $modelInstance->id) ? "|wrla_no_change:users,{$modelInstance->id},permissions->master" : ''),
                    'admin' => 'boolean'.(($currentUser->id == $modelInstance->id) ? "|wrla_no_change:users,{$modelInstance->id},permissions->admin" : '')
                ])
                ->hideContainingBraces()
                ->setAttributes(['placeholder' => 'JSON Data', 'rows' => 4]),

            Json::make($this, 'settings')
                ->mergeDefaultKeyValues([
                    'theme' => 'default'
                ])
                ->jsonFormatValidation([
                    'theme' => 'string|in:default'
                ])
                ->hideContainingBraces()
                ->setAttributes(['placeholder' => 'JSON Data', 'rows' => 4]),

            Json::make($this, 'data')
                ->hideContainingBraces()
                ->setAttributes(['placeholder' => 'JSON Data', 'rows' => 4]),
        ]);
    }

    /**
     * Update the model instance after a POST request.
     *
     * @param Request $request
     * @return void
     */
    public function postUpdateModelInstance(Request $request): void {
        // Relogin as the user if the id is the same as the current user, and email or password has been changed
        if ($this->getModelInstance()->id === auth()->id() && ($request->email !== $this->getModelInstance()->email || $request->password)) {
            auth()->login($this->getModelInstance());
        }
    }

    /**
     * Get specific validation rule
     *
     * @return string
     */
    public function getValidationRule($column): string
    {
        return $this->getValidationRules()->get($column);
    }
}